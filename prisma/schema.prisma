generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AccountBanHistory {
  id         Int      @id @default(autoincrement())
  account_id Int      @db.UnsignedInt
  reason     String   @db.VarChar(255)
  banned_at  BigInt
  expired_at BigInt
  banned_by  Int
  accounts   Accounts @relation(fields: [account_id], references: [id], onDelete: Cascade, map: "account_bans_history_account_fk")
  players    Players  @relation(fields: [banned_by], references: [id], onDelete: Cascade, map: "account_bans_history_player_fk")

  @@index([account_id], map: "account_id")
  @@index([banned_by], map: "banned_by")
  @@map("account_ban_history")
}

model AccountBans {
  account_id Int      @id @db.UnsignedInt
  reason     String   @db.VarChar(255)
  banned_at  BigInt
  expires_at BigInt
  banned_by  Int
  accounts   Accounts @relation(fields: [account_id], references: [id], onDelete: Cascade, map: "account_bans_account_fk")
  players    Players  @relation(fields: [banned_by], references: [id], onDelete: Cascade, map: "account_bans_player_fk")

  @@index([banned_by], map: "banned_by")
  @@map("account_bans")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model AccountViplist {
  account_id  Int      @db.UnsignedInt
  player_id   Int
  description String   @default("") @db.VarChar(128)
  icon        Int      @default(0) @db.UnsignedTinyInt
  notify      Boolean  @default(false)
  accounts    Accounts @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "account_viplist_account_fk")
  players     Players  @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "account_viplist_player_fk")

  @@unique([account_id, player_id], map: "account_viplist_unique")
  @@index([account_id], map: "account_id")
  @@index([player_id], map: "player_id")
  @@map("account_viplist")
}

model Accounts {
  id                  Int                   @id @default(autoincrement()) @db.UnsignedInt
  name                String                @unique(map: "accounts_unique") @default(cuid()) @db.VarChar(32)
  password            String                @db.Text
  email               String                @unique(map: "accounts_email_unique") @db.VarChar(255)
  premdays            Int                   @default(0)
  premdays_purchased  Int                   @default(0)
  lastday             Int                   @default(0) @db.UnsignedInt
  type                Int                   @default(1) @db.UnsignedTinyInt
  coins               Int                   @default(0) @db.UnsignedInt
  coins_transferable  Int                   @default(0) @db.UnsignedInt
  tournament_coins    Int                   @default(0) @db.UnsignedInt
  recruiter           Int?                  @default(0)
  is_verified         Boolean               @default(false)
  creation            Int                   @default(0)
  token_secret        String?               @db.VarChar(255)
  account_ban_history AccountBanHistory[]
  account_bans        AccountBans?
  account_viplist     AccountViplist[]
  coins_transactions  CoinsTransactions[]
  players             Players[]
  backupCodes         AccountBackupCodes[]
  coinOrders          CoinOrders[]
  emailVerifications  EmailVerification[]
  passwordReset       PasswordReset?
  accountSessions     AccountSessions[]
  store_history       StoreHistory[]
  gameAccountSessions GameAccountSessions[]

  @@map("accounts")
}

model BoostedBoss {
  looktypeEx Int     @default(0)
  looktype   Int     @default(136)
  lookfeet   Int     @default(0)
  looklegs   Int     @default(0)
  lookhead   Int     @default(0)
  lookbody   Int     @default(0)
  lookaddons Int     @default(0)
  lookmount  Int?    @default(0)
  date       String  @id @default("") @db.VarChar(250)
  boostname  String? @db.Text
  raceid     String  @default("") @db.VarChar(250)

  @@map("boosted_boss")
}

model BoostedCreature {
  looktype   Int     @default(136)
  lookfeet   Int     @default(0)
  looklegs   Int     @default(0)
  lookhead   Int     @default(0)
  lookbody   Int     @default(0)
  lookaddons Int     @default(0)
  lookmount  Int?    @default(0)
  date       String  @id @default("") @db.VarChar(250)
  boostname  String? @db.Text
  raceid     String  @default("") @db.VarChar(250)

  @@map("boosted_creature")
}

model CoinsTransactions {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  account_id  Int       @db.UnsignedInt
  type        Int       @db.UnsignedTinyInt
  amount      Int       @db.UnsignedInt
  description String    @db.VarChar(3500)
  timestamp   DateTime? @default(now()) @db.Timestamp(0)
  account     Accounts  @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "coins_transactions_account_fk")

  @@index([account_id], map: "account_id")
  @@map("coins_transactions")
}

model DailyRewardHistory {
  id          Int     @id @default(autoincrement())
  daystreak   Int     @default(0) @db.SmallInt
  player_id   Int
  timestamp   Int
  description String? @db.VarChar(255)
  players     Players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "daily_reward_history_player_fk")

  @@index([player_id], map: "player_id")
  @@map("daily_reward_history")
}

model ForgeHistory {
  id           Int       @id @default(autoincrement())
  player_id    Int
  action_type  Int       @default(0)
  description  String    @db.Text
  is_success   Int       @default(0) @db.TinyInt
  bonus        Int       @default(0) @db.TinyInt
  done_at      BigInt
  done_at_date DateTime? @default(now()) @db.DateTime(0)
  cost         BigInt    @default(0) @db.UnsignedBigInt
  gained       BigInt    @default(0) @db.UnsignedBigInt
  players      Players   @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "forge_history_ibfk_1")

  @@index([player_id], map: "player_id")
  @@map("forge_history")
}

model GlobalStorage {
  key   String @unique(map: "global_storage_unique") @db.VarChar(32)
  value String @db.Text

  @@map("global_storage")
}

model GuildInvites {
  player_id Int     @default(0)
  guild_id  Int     @default(0)
  date      Int
  guild     Guilds  @relation(fields: [guild_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "guild_invites_guild_fk")
  player    Players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "guild_invites_player_fk")

  @@id([player_id, guild_id])
  @@index([guild_id], map: "guild_id")
  @@map("guild_invites")
}

model GuildMembership {
  player_id Int        @id
  guild_id  Int
  rank_id   Int
  nick      String     @default("") @db.VarChar(15)
  guild     Guilds     @relation(fields: [guild_id], references: [id], onDelete: Cascade, map: "guild_membership_guild_fk")
  player    Players    @relation(fields: [player_id], references: [id], onDelete: Cascade, map: "guild_membership_player_fk")
  rank      GuildRanks @relation(fields: [rank_id], references: [id], onDelete: Cascade, map: "guild_membership_rank_fk")

  @@index([guild_id], map: "guild_id")
  @@index([rank_id], map: "rank_id")
  @@map("guild_membership")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model GuildRanks {
  id               Int               @id @default(autoincrement())
  guild_id         Int
  name             String            @db.VarChar(255)
  level            Int
  order            Int               @default(0)
  guild_membership GuildMembership[]
  guilds           Guilds            @relation(fields: [guild_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "guild_ranks_fk")

  @@index([guild_id], map: "guild_id")
  @@map("guild_ranks")
}

model GuildWars {
  id             Int            @id @default(autoincrement())
  guild1         Int            @default(0)
  guild2         Int            @default(0)
  name1          String         @db.VarChar(255)
  name2          String         @db.VarChar(255)
  status         Int            @default(0) @db.TinyInt
  started        BigInt         @default(0)
  ended          BigInt         @default(0)
  guildwar_kills GuildwarKills?

  @@index([guild1], map: "guild1")
  @@index([guild2], map: "guild2")
  @@map("guild_wars")
}

model Guilds {
  id               Int               @id @default(autoincrement())
  level            Int               @default(1)
  name             String            @unique(map: "guilds_name_unique") @db.VarChar(255)
  ownerid          Int               @unique(map: "guilds_owner_unique")
  creationdata     Int
  motd             String            @default("") @db.VarChar(255)
  residence        Int               @default(0)
  balance          BigInt            @default(0) @db.UnsignedBigInt
  points           Int               @default(0)
  created_at       DateTime          @default(now()) @db.DateTime(0)
  description      String?           @db.Text
  image_url        String?
  guild_invites    GuildInvites[]
  guild_membership GuildMembership[]
  guild_ranks      GuildRanks[]
  owner            Players           @relation(fields: [ownerid], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "guilds_ownerid_fk")

  @@map("guilds")
}

model GuildwarKills {
  id          Int       @id @default(autoincrement())
  killer      String    @db.VarChar(50)
  target      String    @db.VarChar(50)
  killerguild Int       @default(0)
  targetguild Int       @default(0)
  warid       Int       @unique(map: "guildwar_kills_unique") @default(0)
  time        BigInt
  guild_wars  GuildWars @relation(fields: [warid], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "guildwar_kills_warid_fk")

  @@index([warid], map: "warid")
  @@map("guildwar_kills")
}

model HouseLists {
  house_id Int
  listid   Int
  list     String @db.Text
  id       Int    @id @default(autoincrement())
  houses   Houses @relation(fields: [house_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "houses_list_house_fk")

  @@index([house_id], map: "house_id")
  @@map("house_lists")
}

model Houses {
  id             Int          @id @default(autoincrement())
  owner          Int
  paid           Int          @default(0) @db.UnsignedInt
  warnings       Int          @default(0)
  name           String       @db.VarChar(255)
  rent           Int          @default(0)
  town_id        Int          @default(0)
  bid            Int          @default(0)
  bid_end        Int          @default(0)
  last_bid       Int          @default(0)
  highest_bidder Int          @default(0)
  size           Int          @default(0)
  guildid        Int?
  beds           Int          @default(0)
  house_lists    HouseLists[]
  tile_store     TileStore[]

  @@index([owner], map: "owner")
  @@index([town_id], map: "town_id")
  @@map("houses")
}

model IPBans {
  ip         Int     @id
  reason     String  @db.VarChar(255)
  banned_at  BigInt
  expires_at BigInt
  banned_by  Int
  players    Players @relation(fields: [banned_by], references: [id], onDelete: Cascade, map: "ip_bans_players_fk")

  @@index([banned_by], map: "banned_by")
  @@map("ip_bans")
}

model MarketHistory {
  id         Int     @id @default(autoincrement())
  player_id  Int
  sale       Boolean @default(false)
  itemtype   Int     @db.UnsignedInt
  amount     Int     @db.UnsignedSmallInt
  price      BigInt  @default(0) @db.UnsignedBigInt
  expires_at BigInt  @db.UnsignedBigInt
  inserted   BigInt  @db.UnsignedBigInt
  state      Int     @db.UnsignedTinyInt
  tier       Int     @default(0) @db.UnsignedTinyInt
  players    Players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "market_history_players_fk")

  @@index([player_id, sale], map: "player_id")
  @@map("market_history")
}

model MarketOffers {
  id        Int     @id @default(autoincrement())
  player_id Int
  sale      Boolean @default(false)
  itemtype  Int     @db.UnsignedInt
  amount    Int     @db.UnsignedSmallInt
  created   BigInt  @db.UnsignedBigInt
  anonymous Boolean @default(false)
  price     BigInt  @default(0) @db.UnsignedBigInt
  tier      Int     @default(0) @db.UnsignedTinyInt
  players   Players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "market_offers_players_fk")

  @@index([created], map: "created")
  @@index([player_id], map: "player_id")
  @@index([sale, itemtype], map: "sale")
  @@map("market_offers")
}

model PlayerBosstiary {
  player_id     Int
  bossIdSlotOne Int @default(0)
  bossIdSlotTwo Int @default(0)
  removeTimes   Int @default(1)
  id            Int @id @default(autoincrement())

  @@map("player_bosstiary")
}

model PlayerCharms {
  player_guid      Int
  charm_points     String?  @db.VarChar(250)
  charm_expansion  Boolean?
  rune_wound       Int?
  rune_enflame     Int?
  rune_poison      Int?
  rune_freeze      Int?
  rune_zap         Int?
  rune_curse       Int?
  rune_cripple     Int?
  rune_parry       Int?
  rune_dodge       Int?
  rune_adrenaline  Int?
  rune_numb        Int?
  rune_cleanse     Int?
  rune_bless       Int?
  rune_scavenge    Int?
  rune_gut         Int?
  rune_low_blow    Int?
  rune_divine      Int?
  rune_vamp        Int?
  rune_void        Int?
  UsedRunesBit     String?  @db.VarChar(250)
  UnlockedRunesBit String?  @db.VarChar(250)
  tracker_list     Bytes?   @map("tracker list") @db.Blob
  id               Int      @id @default(autoincrement())

  @@map("player_charms")
}

model PlayerDeaths {
  player_id              Int
  time                   BigInt  @default(0) @db.UnsignedBigInt
  level                  Int     @default(1)
  killed_by              String  @db.VarChar(255)
  is_player              Boolean @default(true)
  mostdamage_by          String  @db.VarChar(100)
  mostdamage_is_player   Boolean @default(false)
  unjustified            Boolean @default(false)
  mostdamage_unjustified Boolean @default(false)
  id                     Int     @id @default(autoincrement())
  players                Players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "player_deaths_players_fk")

  @@index([killed_by], map: "killed_by")
  @@index([mostdamage_by], map: "mostdamage_by")
  @@index([player_id], map: "player_id")
  @@map("player_deaths")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model PlayerDepotitems {
  player_id  Int
  sid        Int
  pid        Int     @default(0)
  itemtype   Int     @default(0)
  count      Int     @default(0)
  attributes Bytes   @db.Blob
  players    Players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "player_depotitems_players_fk")

  @@unique([player_id, sid], map: "player_depotitems_unique")
  @@map("player_depotitems")
}

model PlayerHirelings {
  id        Int     @id @default(autoincrement())
  player_id Int
  name      String? @db.VarChar(255)
  active    Int     @default(0) @db.UnsignedTinyInt
  sex       Int     @default(0) @db.UnsignedTinyInt
  posx      Int     @default(0)
  posy      Int     @default(0)
  posz      Int     @default(0)
  lookbody  Int     @default(0)
  lookfeet  Int     @default(0)
  lookhead  Int     @default(0)
  looklegs  Int     @default(0)
  looktype  Int     @default(136)
  players   Players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "player_hirelings_ibfk_1")

  @@index([player_id], map: "player_id")
  @@map("player_hirelings")
}

model PlayerInboxitems {
  player_id  Int
  sid        Int
  pid        Int     @default(0)
  itemtype   Int     @default(0)
  count      Int     @default(0)
  attributes Bytes   @db.Blob
  players    Players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "player_inboxitems_players_fk")

  @@unique([player_id, sid], map: "player_inboxitems_unique")
  @@map("player_inboxitems")
}

model PlayerItems {
  player_id  Int     @default(0)
  pid        Int     @default(0)
  sid        Int     @id @default(autoincrement())
  itemtype   Int     @default(0)
  count      Int     @default(0)
  attributes Bytes   @db.Blob
  players    Players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "player_items_players_fk")

  @@index([player_id], map: "player_id")
  @@index([sid], map: "sid")
  @@map("player_items")
}

model PlayerKills {
  player_id Int
  time      BigInt  @default(0) @db.UnsignedBigInt
  target    Int
  unavenged Boolean @default(false)
  id        Int     @id @default(autoincrement())

  @@map("player_kills")
}

model PlayerMisc {
  player_id Int
  info      Bytes @db.Blob
  id        Int   @id @default(autoincrement())

  @@map("player_misc")
}

model PlayerNamelocks {
  player_id                                       Int     @unique(map: "player_namelocks_unique")
  reason                                          String  @db.VarChar(255)
  namelocked_at                                   BigInt
  namelocked_by                                   Int
  players_player_namelocks_namelocked_byToplayers Players @relation("player_namelocks_namelocked_byToplayers", fields: [namelocked_by], references: [id], onDelete: Cascade, map: "player_namelocks_players2_fk")
  players_player_namelocks_player_idToplayers     Players @relation("player_namelocks_player_idToplayers", fields: [player_id], references: [id], onDelete: Cascade, map: "player_namelocks_players_fk")

  @@index([namelocked_by], map: "namelocked_by")
  @@map("player_namelocks")
}

model PlayerPrey {
  player_id        Int
  slot             Boolean
  state            Boolean
  raceid           String  @db.VarChar(250)
  option           Boolean
  bonus_type       Boolean
  bonus_rarity     Boolean
  bonus_percentage String  @db.VarChar(250)
  bonus_time       String  @db.VarChar(250)
  free_reroll      BigInt
  monster_list     Bytes?  @db.Blob
  id               Int     @id @default(autoincrement())

  @@map("player_prey")
}

model PlayerRewards {
  player_id  Int
  sid        Int
  pid        Int     @default(0)
  itemtype   Int     @default(0)
  count      Int     @default(0)
  attributes Bytes   @db.Blob
  players    Players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "player_rewards_players_fk")

  @@unique([player_id, sid], map: "player_rewards_unique")
  @@map("player_rewards")
}

model PlayerSpells {
  player_id Int
  name      String  @db.VarChar(255)
  id        Int     @id @default(autoincrement())
  players   Players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "player_spells_players_fk")

  @@index([player_id], map: "player_id")
  @@map("player_spells")
}

model PlayerStash {
  player_id  Int
  item_id    Int
  item_count Int
  id         Int @id @default(autoincrement())

  @@map("player_stash")
}

model PlayerStorage {
  player_id Int     @default(0)
  key       Int     @default(0) @db.UnsignedInt
  value     Int     @default(0)
  players   Players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "player_storage_players_fk")

  @@id([player_id, key])
  @@map("player_storage")
}

model PlayerTaskhunt {
  player_id     Int
  slot          Boolean
  state         Boolean
  raceid        String  @db.VarChar(250)
  upgrade       Boolean
  rarity        Boolean
  kills         String  @db.VarChar(250)
  disabled_time BigInt
  free_reroll   BigInt
  monster_list  Bytes?  @db.Blob
  id            Int     @id @default(autoincrement())

  @@map("player_taskhunt")
}

model Players {
  id                                                Int                  @id @default(autoincrement())
  name                                              String               @unique(map: "players_unique") @db.VarChar(255)
  group_id                                          Int                  @default(1)
  account_id                                        Int                  @default(0) @db.UnsignedInt
  level                                             Int                  @default(8)
  vocation                                          Int                  @default(0)
  health                                            Int                  @default(185)
  healthmax                                         Int                  @default(185)
  experience                                        BigInt               @default(4200)
  lookbody                                          Int                  @default(0)
  lookfeet                                          Int                  @default(0)
  lookhead                                          Int                  @default(0)
  looklegs                                          Int                  @default(0)
  looktype                                          Int                  @default(136)
  lookaddons                                        Int                  @default(0)
  maglevel                                          Int                  @default(0)
  mana                                              Int                  @default(90)
  manamax                                           Int                  @default(90)
  manaspent                                         BigInt               @default(0) @db.UnsignedBigInt
  soul                                              Int                  @default(0) @db.UnsignedInt
  town_id                                           Int                  @default(1)
  posx                                              Int                  @default(0)
  posy                                              Int                  @default(0)
  posz                                              Int                  @default(0)
  conditions                                        Bytes                @db.Blob
  cap                                               Int                  @default(0)
  sex                                               Int                  @default(0)
  lastlogin                                         BigInt               @default(0) @db.UnsignedBigInt
  lastip                                            Int                  @default(0) @db.UnsignedInt
  save                                              Boolean              @default(true)
  skull                                             Boolean              @default(false)
  skulltime                                         BigInt               @default(0)
  lastlogout                                        BigInt               @default(0) @db.UnsignedBigInt
  blessings                                         Int                  @default(0) @db.TinyInt
  blessings1                                        Int                  @default(0) @db.TinyInt
  blessings2                                        Int                  @default(0) @db.TinyInt
  blessings3                                        Int                  @default(0) @db.TinyInt
  blessings4                                        Int                  @default(0) @db.TinyInt
  blessings5                                        Int                  @default(0) @db.TinyInt
  blessings6                                        Int                  @default(0) @db.TinyInt
  blessings7                                        Int                  @default(0) @db.TinyInt
  blessings8                                        Int                  @default(0) @db.TinyInt
  onlinetime                                        Int                  @default(0)
  deletion                                          BigInt               @default(0)
  balance                                           BigInt               @default(0) @db.UnsignedBigInt
  offlinetraining_time                              Int                  @default(43200) @db.UnsignedSmallInt
  offlinetraining_skill                             Int                  @default(-1) @db.TinyInt
  stamina                                           Int                  @default(2520) @db.UnsignedSmallInt
  skill_fist                                        Int                  @default(10) @db.UnsignedInt
  skill_fist_tries                                  BigInt               @default(0) @db.UnsignedBigInt
  skill_club                                        Int                  @default(10) @db.UnsignedInt
  skill_club_tries                                  BigInt               @default(0) @db.UnsignedBigInt
  skill_sword                                       Int                  @default(10) @db.UnsignedInt
  skill_sword_tries                                 BigInt               @default(0) @db.UnsignedBigInt
  skill_axe                                         Int                  @default(10) @db.UnsignedInt
  skill_axe_tries                                   BigInt               @default(0) @db.UnsignedBigInt
  skill_dist                                        Int                  @default(10) @db.UnsignedInt
  skill_dist_tries                                  BigInt               @default(0) @db.UnsignedBigInt
  skill_shielding                                   Int                  @default(10) @db.UnsignedInt
  skill_shielding_tries                             BigInt               @default(0) @db.UnsignedBigInt
  skill_fishing                                     Int                  @default(10) @db.UnsignedInt
  skill_fishing_tries                               BigInt               @default(0) @db.UnsignedBigInt
  skill_critical_hit_chance                         Int                  @default(0) @db.UnsignedInt
  skill_critical_hit_chance_tries                   BigInt               @default(0) @db.UnsignedBigInt
  skill_critical_hit_damage                         Int                  @default(0) @db.UnsignedInt
  skill_critical_hit_damage_tries                   BigInt               @default(0) @db.UnsignedBigInt
  skill_life_leech_chance                           Int                  @default(0) @db.UnsignedInt
  skill_life_leech_chance_tries                     BigInt               @default(0) @db.UnsignedBigInt
  skill_life_leech_amount                           Int                  @default(0) @db.UnsignedInt
  skill_life_leech_amount_tries                     BigInt               @default(0) @db.UnsignedBigInt
  skill_mana_leech_chance                           Int                  @default(0) @db.UnsignedInt
  skill_mana_leech_chance_tries                     BigInt               @default(0) @db.UnsignedBigInt
  skill_mana_leech_amount                           Int                  @default(0) @db.UnsignedInt
  skill_mana_leech_amount_tries                     BigInt               @default(0) @db.UnsignedBigInt
  skill_criticalhit_chance                          BigInt               @default(0) @db.UnsignedBigInt
  skill_criticalhit_damage                          BigInt               @default(0) @db.UnsignedBigInt
  skill_lifeleech_chance                            BigInt               @default(0) @db.UnsignedBigInt
  skill_lifeleech_amount                            BigInt               @default(0) @db.UnsignedBigInt
  skill_manaleech_chance                            BigInt               @default(0) @db.UnsignedBigInt
  skill_manaleech_amount                            BigInt               @default(0) @db.UnsignedBigInt
  manashield                                        Int                  @default(0) @db.UnsignedSmallInt
  max_manashield                                    Int                  @default(0) @db.UnsignedSmallInt
  xpboost_stamina                                   Int?                 @db.SmallInt
  xpboost_value                                     Int?                 @db.TinyInt
  marriage_status                                   BigInt               @default(0) @db.UnsignedBigInt
  marriage_spouse                                   Int                  @default(-1)
  bonus_rerolls                                     BigInt               @default(0)
  prey_wildcard                                     BigInt               @default(0)
  task_points                                       BigInt               @default(0)
  quickloot_fallback                                Boolean?             @default(false)
  lookmountbody                                     Int                  @default(0) @db.UnsignedTinyInt
  lookmountfeet                                     Int                  @default(0) @db.UnsignedTinyInt
  lookmounthead                                     Int                  @default(0) @db.UnsignedTinyInt
  lookmountlegs                                     Int                  @default(0) @db.UnsignedTinyInt
  lookfamiliarstype                                 Int                  @default(0) @db.UnsignedInt
  isreward                                          Boolean              @default(true)
  istutorial                                        Boolean              @default(false)
  forge_dusts                                       BigInt               @default(0)
  forge_dust_level                                  BigInt               @default(100)
  randomize_mount                                   Boolean              @default(false)
  boss_points                                       Int                  @default(0)
  is_main                                           Boolean              @default(false)
  pronoun                                           Int                  @default(0)
  account_ban_history                               AccountBanHistory[]
  account_bans                                      AccountBans[]
  account_viplist                                   AccountViplist[]
  daily_reward_history                              DailyRewardHistory[]
  forge_history                                     ForgeHistory[]
  guild_invites                                     GuildInvites[]
  guild_membership                                  GuildMembership?
  owned_guild                                       Guilds?
  ip_bans                                           IPBans[]
  market_history                                    MarketHistory[]
  market_offers                                     MarketOffers[]
  deaths                                            PlayerDeaths[]
  depotitems                                        PlayerDepotitems[]
  hirelings                                         PlayerHirelings[]
  inboxitems                                        PlayerInboxitems[]
  items                                             PlayerItems[]
  namelocks_player_namelocks_namelocked_byToplayers PlayerNamelocks[]    @relation("player_namelocks_namelocked_byToplayers")
  namelocks_player_namelocks_player_idToplayers     PlayerNamelocks?     @relation("player_namelocks_player_idToplayers")
  rewards                                           PlayerRewards[]
  spells                                            PlayerSpells[]
  storage                                           PlayerStorage[]
  player_wheeldata                                  PlayerWheeldata[]
  account                                           Accounts             @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "players_account_fk")
  online                                            PlayerOnline?
  posted_articles                                   News[]
  settings                                          PlayerSettings?

  @@index([deletion], map: "deletion")
  @@index([account_id], map: "account_id")
  @@index([vocation], map: "vocation")
  @@map("players")
}

model PlayerOnline {
  player_id Int     @id
  player    Players @relation(fields: [player_id], references: [id])

  @@map("players_online")
}

model ServerConfig {
  config String @id @db.VarChar(50)
  value  String @default("") @db.VarChar(256)

  @@map("server_config")
}

model StoreHistory {
  id          Int      @id @default(autoincrement())
  account_id  Int      @db.UnsignedInt
  mode        Int      @default(0) @db.SmallInt
  description String   @db.VarChar(3500)
  coin_type   Boolean  @default(false)
  coin_amount Int
  time        BigInt   @db.UnsignedBigInt
  timestamp   Int      @default(0)
  coins       Int      @default(0)
  accounts    Accounts @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "store_history_account_fk")

  @@index([account_id], map: "account_id")
  @@map("store_history")
}

model TileStore {
  house_id Int
  data     Bytes
  id       Int    @id @default(autoincrement())
  houses   Houses @relation(fields: [house_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "tile_store_account_fk")

  @@index([house_id], map: "house_id")
  @@map("tile_store")
}

model Towns {
  id      Int     @id @default(autoincrement())
  name    String  @unique(map: "name") @db.VarChar(255)
  posx    Int     @default(0)
  posy    Int     @default(0)
  posz    Int     @default(0)
  starter Boolean @default(false)

  @@map("towns")
}

model GameAccountSessions {
  id         String   @id @default(cuid())
  account_id Int      @db.UnsignedInt
  expires    BigInt   @db.UnsignedBigInt
  account    Accounts @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("account_sessions")
}

model AccountBackupCodes {
  id         String   @id @default(cuid())
  account_id Int      @db.UnsignedInt
  code       String   @db.VarChar(255)
  used       Boolean  @default(false)
  account    Accounts @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([account_id], map: "slender_account_backup_codes_account_id_fkey")
  @@map("slender_account_backup_codes")
}

model AccountSessions {
  id         String   @id @default(cuid())
  expires    BigInt   @db.UnsignedBigInt
  account_id Int      @db.UnsignedInt
  account    Accounts @relation(fields: [account_id], references: [id], onDelete: Cascade)

  @@index([account_id], map: "slender_sessions_account_id_fkey")
  @@map("slender_sessions")
}

model News {
  id         String   @id @default(cuid())
  published  Boolean  @default(false)
  title      String   @db.VarChar(255)
  content    String   @db.Text
  author_id  Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  author     Players  @relation(fields: [author_id], references: [id])

  @@index([author_id], map: "slender_news_author_id_fkey")
  @@map("slender_news")
}

model StaticPage {
  id         String   @id @default(cuid())
  slug       String   @unique
  title      String   @db.VarChar(255)
  content    String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  order      Int      @default(0)
  hide       Boolean  @default(false)

  @@map("slender_static_pages")
}

model CoinOffers {
  id       String  @id @default(cuid())
  amount   Int     @default(0)
  price    Decimal
  currency String  @default("USD")

  @@unique([amount, currency], map: "slender_coin_offers_amount_currency_key")
  @@map("slender_coin_offers")
}

model CoinOrders {
  id            String          @id @default(cuid())
  status        CoinOrderStatus @default(PENDING)
  account_id    Int             @db.UnsignedInt
  price         Decimal
  currency      String          @default("USD")
  amount        Int             @default(0)
  created_at    DateTime        @default(now())
  updated_at    DateTime        @default(now()) @updatedAt
  payment_token String          @unique
  account       Accounts        @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([account_id], map: "slender_coin_orders_account_id_fkey")
  @@map("slender_coin_orders")
}

model CurrencyExchangeRates {
  currency   String   @id
  rate       Decimal
  updated_at DateTime @default(now()) @updatedAt

  @@map("slender_currency_exchange_rates")
}

model PasswordReset {
  token      String   @id @default(cuid())
  account_id Int      @unique @db.UnsignedInt
  expires    DateTime
  account    Accounts @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("slender_password_resets")
}

model EmailVerification {
  token      String   @id @default(cuid())
  account_id Int      @db.UnsignedInt
  expires    DateTime
  new_email  String?  @db.VarChar(255)
  created_at DateTime @default(now())
  account    Accounts @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("slender_email_verifications")
}

model PlayerSettings {
  id             String  @id @default(cuid())
  player_id      Int     @unique
  hidden         Boolean @default(false)
  show_skills    Boolean @default(true)
  show_inventory Boolean @default(true)
  comment        String? @db.Text
  player         Players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([player_id], map: "player_id")
  @@map("slender_player_settings")
}

model Monsters {
  id         Int    @id @default(autoincrement())
  name       String @unique(map: "name") @db.VarChar(191)
  lookbody   Int    @default(0)
  lookfeet   Int    @default(0)
  lookhead   Int    @default(0)
  looklegs   Int    @default(0)
  looktype   Int    @default(136)
  lookaddons Int    @default(0)
  lookmount  Int    @default(0)
  looktypeex Int    @default(0)
  raceid     Int    @default(0)

  @@map("monsters")
}

model PlayerWheeldata {
  player_id Int     @id
  slot      Bytes   @db.Blob
  player    Players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "player_wheeldata_players_fk")

  @@index([player_id], map: "player_id")
  @@map("player_wheeldata")
}

enum CoinOrderStatus {
  PENDING
  FAILED_ATTEMPT
  COMPLETED
  CANCELED

  @@map("slender_coin_order_status")
}
